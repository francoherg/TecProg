/*1. Escriba un programa en prolog que determine si una casilla del tablero de ajedrez se
encuentra amenazada. En caso de estarlo, indicar quien la amenaza y desde que posición.
Las piezas a tener en cuenta serán:
● reina: mueve en diagonal y en linea recta
● alfil: mueve siempre en diagonal
● torre: mueve siempre en linea recta
La forma de indicar la posición de las piezas rivales será:
"pieza"(F, C).
En donde:
● "pieza" es una de las piezas descriptas arriba.
● F es la fila en donde se encuentra la pieza
● C es la columna en donde se encuentra la pieza
Ejemplo:
reina(2, 3).
alfil(6, 3).
torre(8, 5).
amenaza(4, 5, R).
R = reina(2, 3).
R = alfil(6, 3).
R = torre(8, 5).
*/
concatenar([],L,L).
concatenar([X|L1],L2,[X|L3]):- concatenar(L1,L2,L3).

reina(2, 3).
alfil(6, 3).
torre(8, 5).

amenazaTorreY(Y,torre(Z,Y)):- torre(Z,Y). 
amenazaTorreX(X,torre(X,Z)):- torre(X,Z). 
amenazaTorre(9,_,[]):- !,fail.
amenazaTorre(_,9,[]):- !,fail.
amenazaTorre(_,0,[]):- !,fail.
amenazaTorre(0,_,[]):- !,fail.
amenazaTorre(X,Y,R):- amenazaTorreX(X,R) ; amenazaTorreY(Y,R).


amenazaAlfilNorEste(X,Y,alfil(Z,W)):-  alfil(Z,W), Z is X+1, W is Y+1,!.
amenazaAlfilNorEste(X,Y,alfil(Z,W)):-  X<9 ,X>0 , Y >0 , Y < 9, amenazaAlfilNorEste(X+1,Y+1,alfil(Z,W)).

amenazaAlfilNorOeste(X,Y,alfil(Z,W)):-  alfil(Z,W), Z is X-1, W is Y+1,!.
amenazaAlfilNorOeste(X,Y,alfil(Z,W)):-  X<9 ,X>0 , Y >0 , Y < 9, amenazaAlfilNorOeste(X-1,Y+1,alfil(Z,W)).

amenazaAlfilSurOeste(X,Y,alfil(Z,W)):-  alfil(Z,W), Z is X-1, W is Y-1,!.
amenazaAlfilSurOeste(X,Y,alfil(Z,W)):-  X<9 ,X>0 , Y >0 , Y < 9, amenazaAlfilSurOeste(X-1,Y-1,alfil(Z,W)).

amenazaAlfilSurEste(X,Y,alfil(Z,W)):-  alfil(Z,W), Z is X+1, W is Y-1,!.
amenazaAlfilSurEste(X,Y,alfil(Z,W)):-  X<9 ,X>0 , Y >0 , Y < 9, amenazaAlfilSurEste(X+1,Y-1,alfil(Z,W)).

amenazaAlfil(X,Y,R):-  amenazaAlfilNorEste(X,Y,R) ;amenazaAlfilNorOeste(X,Y,R)  ; amenazaAlfilSurOeste(X,Y,R) ; amenazaAlfilSurEste(X,Y,R). 


amenazaReinaNorEste(X,Y,reina(Z,W)):-  reina(Z,W), Z is X+1, W is Y+1,!.
amenazaReinaNorEste(X,Y,reina(Z,W)):-  X<9 ,X>0 , Y >0 , Y < 9, amenazaReinaNorEste(X+1,Y+1,reina(Z,W)).

amenazaReinaNorOeste(X,Y,reina(Z,W)):-  reina(Z,W), Z is X-1, W is Y+1,!.
amenazaReinaNorOeste(X,Y,reina(Z,W)):-  X<9 ,X>0 , Y >0 , Y < 9, amenazaReinaNorOeste(X-1,Y+1,reina(Z,W)).

amenazaReinaSurOeste(X,Y,reina(Z,W)):-  reina(Z,W), Z is X-1, W is Y-1,!.
amenazaReinaSurOeste(X,Y,reina(Z,W)):-  X<9 ,X>0 , Y >0 , Y < 9, amenazaReinaSurOeste(X-1,Y-1,reina(Z,W)).

amenazaReinaSurEste(X,Y,reina(Z,W)):-  reina(Z,W), Z is X+1, W is Y-1,!.
amenazaReinaSurEste(X,Y,reina(Z,W)):-  X<9 ,X>0 , Y >0 , Y < 9, amenazaReinaSurEste(X+1,Y-1,reina(Z,W)).
amenazaReinaY(Y,reina(Z,Y)):- Y >0 , Y < 9,reina(Z,Y). 
amenazaReinaX(X,reina(X,Z)):- X<9 ,X>0,reina(X,Z). 
amenazaReinaXY(X,Y,R):- amenazaReinaX(X,R) ; amenazaReinaY(Y,R).
amenazaReinaCruz(X,Y,R):-  amenazaReinaNorEste(X,Y,R) ;amenazaReinaNorOeste(X,Y,R)  ; amenazaReinaSurOeste(X,Y,R) ; amenazaReinaSurEste(X,Y,R). 

amenazaReina(X,Y,R):- amenazaReinaXY(X,Y,R) ; amenazaReinaCruz(X,Y,R).

amenaza(X,Y,R):- amenazaReina(X,Y,R) ; amenazaAlfil(X,Y,R) ; amenazaTorre(X,Y,R).


/* Se desea programar un sistema de recomendación de películas para Netflix. Cuando un
usuario inicia la aplicación, el sistema debe recomendarle una lista de películas, según lo
que éste haya visto previamente. 

Para eso, consulta en toda la base de conocimientos la listas de películas 
de los usuarios de Netflix y organiza la recomendación en función de
los que hayan visto las mismas películas que el usuario en cuestión, basado en un nivel de
similaridad.

Por ejemplo, si tenemos 3 usuarios en Netflix, y en la base de conocimientos tenemos que
las películas que vio el usuario José fueron 'Misterio a Bordo', 'The Perfection', 'Otro día
para matar','Barreras','Yo soy Sam','Inspection'; las que vio el usuario María fueron 'Quizás
para siempre','A pesar de todo','La casa del Lago','Barreras'; y las que vio el usuario Pedro
son 'Barreras', 'Otro día para matar', 'Yo soy Sam','A pesar de todo'; 
si Pedro inicia su
sesión, el sistema debe recomendar películas en función de su lista de películas vistas y
de la lista de otro usuario con cuya similitud de películas vistas sea mayor a 2. En esta
caso, se debería obtener la/s película/s que Pedro no vio: 'A pesar de todo'.
Se solicita, en base a este ejemplo, crear la recomendación de la/s película/s para el
usuario Pedro.
*/
miembro(X,[X|_]).
miembro(X,[_|R]):- miembro(X,R).

eliminar(_,[],[]).
eliminar(X,[Y|Resto],L):- X = Y, eliminar(X,Resto,L),!.
eliminar(X,[Y|Resto],[Y|L]):- X\= Y, eliminar(X,Resto,L),!.

eliminar_repetidos(_,[],[]).
eliminar_repetidos([],_,[]).
eliminar_repetidos([X|RestoX],Lista,Res):- miembro(X,Lista), eliminar(X, Lista,ListaSinX), eliminar_repetidos(RestoX,ListaSinX,Res),!.
eliminar_repetidos([X|RestoX],Lista,[X|Res]):- eliminar_repetidos(RestoX,Lista,Res),!.

vistas(jose,['Misterio a Bordo', 'The Perfection', 'Otro día para matar','Barreras','Yo soy Sam','Inspection']).
vistas(maria,['Quizás para siempre','A pesar de todo','La casa del Lago','Barreras']).
vistas(pedro,['Barreras', 'Otro día para matar', 'Yo soy Sam','A pesar de todo']).

similitud([],_,0).
similitud([X|R],Lista,Resultado):- miembro(X,Lista), similitud(R,Lista,Res2), Resultado is Res2 +1,!.
similitud([_|R],Lista,Resultado):- similitud(R,Lista,Resultado),!.

similitudVistas(X,Y,R):- vistas(X,Z), vistas(Y,W), similitud(Z,W,R),!.

recomendaciones(X,R):- similitudVistas(X,Z,Similitud), Similitud>2, vistas(X,VistasX), vistas(Z,VistasZ), eliminar_repetidos(VistasZ,VistasX,R).


/*
 * 3. Implemente en prolog los predicados que se describen a continuación teniendo en cuenta
las siguientes consideraciones:
● No se deben usar predicados predefinidos
● Se estará trabajando con conjuntos
● Los mismos se representarán como listas de elementos
● Los conjuntos no pueden tener elementos repetidos, condición que hay que validar
en los conjuntos de entradas y asegurar en el de salida
a. union(C1, C1, U)
El predicado union/3 ejecuta la unión entre los conjuntos C1 y C2 y devuelve el
resultado en el conjunto U.
union([1, 2, 3], [3, 4, 5], U).
U = [1, 2, 3, 4, 5].
b. interseccion(C1, C1, U)
El predicado interseccion/3 ejecuta la intersección entre los conjuntos C1 y C2, y
devuelve el resultado en el conjunto U.
interseccion([1, 2, 3], [3, 4, 5], U).
U = [3].
c. diferencia(C1, C1, U)
El predicado diferencia/3 ejecuta la operación diferencia de conjuntos entre los
conjuntos C1 y C2, y devuelve el resultado en el conjunto U.
diferencia([1, 2, 3], [3, 4, 5], U).
U = [1, 2].
MPORTANTE: No utilizar predicados predefinidos y verificar que los conjuntos de entrada
sean válidos, es decir que no contengan elementos repetidos, en caso de ser inválidos
alguno de los dos, el predicado debe fallar.
*/
concatenar([],L,L).
concatenar([X|L1],L2,[X|L3]):- concatenar(L1,L2,L3).

tieneRepetidos([]):- !,fail.
tieneRepetidos([X|R]):- (   miembro(X,R) ,!); tieneRepetidos(R).

union(X,Y,_):- (   tieneRepetidos(X) ; tieneRepetidos(Y)), !,fail.
union(_,[],[]).
union(X,[Y|R],Res):- miembro(Y,X), union(X,R,ResAux),concatenar(X,ResAux,Res),!.
union(X,[Y|R],[Y|Res]):- not(miembro(Y,X)),union(X,R,Res).

interseccion(X,Y,_):- (   tieneRepetidos(X) ; tieneRepetidos(Y)), !,fail.
interseccion([],_,[]).
interseccion([X|R],Lista,[X|Res]):- miembro(X,Lista), interseccion(R,Lista,Res),!.
interseccion([_|R],Lista,Res):- interseccion(R,Lista,Res),!.

diferencia(X,Y,_):- (   tieneRepetidos(X) ; tieneRepetidos(Y)), !,fail.
diferencia([],_,[]).
diferencia([X|RestoX],Lista,Res):- miembro(X,Lista), eliminar(X, Lista,ListaSinX), diferencia(RestoX,ListaSinX,Res),!.
diferencia([X|RestoX],Lista,[X|Res]):- diferencia(RestoX,Lista,Res),!.




   
    
    
    
    
