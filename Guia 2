miembro(X,[X|_]).
miembro(X,[_|R]):- miembro(X,R).

concatenar([],L,L).
concatenar([X|L1],L2,[X|L3]):- concatenar(L1,L2,L3).

inversa([],[]).
inversa([X|L1],L):- inversa(L1,Resto), concatenar(Resto,[X],L).

%trace habilita el debug
%notrace sale del debug

%Cree un programa en Prolog que permita calcular el factorial de un número con el predicado
%“factorial/2”, validando que dicho número sea mayor o igual a cero.

factorial(0,1).
factorial(N,F):- N>0, N1 is N-1, factorial(N1,F1), F is N * F1.

%Cree un programa en Prolog que cuente 
%la cantidad de veces que aparece un elemento en una
%lista.

contar(_,[],0). %cond corte
contar(X,[X|Resto],Cant):- contar(X,Resto,Cant2), Cant is Cant2 + 1.
contar(X,[_|Resto],Cant):- contar(X,Resto,Cant).
%contar(1,[1,2,3,4,5,1],Cant).

%Escribir un programa en Prolog “cantidad/2” 
%que reciba como primer parámetro una 
%lista de
%números y unifique el segundo con la 
%cantidad de elementos de dicha lista.

cantidad([],0). %cond corte
cantidad([_|Resto],Cant):- cantidad(Resto,Cant2), Cant is Cant2 + 1.

%cantidad([1,2,3],Cant).

%Escriba un programa en Prolog 
%que dada una lista de números enteros, 
%calcule el resultado de
%sumar dichos números.

suma([X,Y],Sum):- Sum is X+Y.
suma([X|Resto],Sum):- suma(Resto,Sum2), Sum is Sum2 + X. 

%suma([1,2,3],Sum).

%Escriba un programa en Prolog que, 
%dada una lista de números enteros, 
%retorne otra lista solo
%con los números positivos de la misma.
positivos([],[]).
positivos([X|Resto],Lposit):- X<0, positivos(Resto,Lposit).
positivos([X|Resto],[X|Lposit]):- positivos(Resto,Lposit).

%positivos([1,-2,-3,5,6],Sum).

%Escribir un programa en Prolog que 
%reciba dos listas de números, 
%verifiquen que sean de la
%misma longitud, y luego retorne un
%lista con la suma elemento a elemento 
%de ambas listas

suma_lista([],[],[]).
suma_lista([X|RestoX],[Y|RestoY],[Z|LS]):- cantidad(RestoX,TamX),
    cantidad(RestoY,TamY), TamX = TamY, Z is X+Y, suma_lista(RestoX,RestoY,LS).
%suma_lista([1,2,3],[2,3,4],LS).

%Escriba un programa en Prolog que dada 
%una lista elimine todos los elementos 
%duplicados de la misma

eliminar(_,[],[]).
eliminar(X,[Y|Resto],L):- X = Y, eliminar(X,Resto,L).
eliminar(X,[Y|Resto],[Y|L]):- X\= Y, eliminar(X,Resto,L).

eliminar_dup([],[]).
eliminar_dup([X|Resto],[X|Res]):- eliminar(X,Resto,RestosinX), eliminar_dup(RestosinX,Res).
%eliminar_dup([2,3,3,4],L).

%Escribir un programa en Prolog 
%que recorra un árbol binario y 
%determine la profundidad del mismo


%La representación del árbol será una lista 
%con el siguiente formato: [I, N, D] en donde:
%● I es una lista que representa el subárbol 
% de la rama izquierda
%● N es el valor del nodo raíz
%● D es una lista que representa el 
% subárbol de la rama derecha

profundidad([],0).
profundidad([_],1).
profundidad([Izq,_,Der],Prof):- profundidad(Izq,Pizq),profundidad(Der,Pder), Pizq>=Pder, Prof is Pizq + 1.
profundidad([_,_,Der],Prof):- profundidad(Der,Pder), Prof is Pder + 1.

%profundidad([[[c], b, [d]], a, [[], e, [f]]], Profundidad). 


%Escriba un programa en Prolog que dada una lista numérica ordenada, inserte un elemento en
%el lugar correspondiente según el orden

    % insertar(3, [1, 2, 4, 5], Resultado)
insertar(N,[],[N]). %Cond corte
insertar(N,[X|Resto],[X|Resultado]):- N >= X, insertar(N,Resto,Resultado). %Si es mayor, *no hago nada* = concateno el primer elemento con el resto de la lista procesada
insertar(N,[X|Resto],[N|[X|Resto]]):- N < X. %Si N es menor, lo pongo atras de X en la lista, por lo q N es mayor q todos los de la izq

%Escriba un programa en Prolog que recursivamente ordene una lista de números enteros.
%Ej.: ordenar([2, 4, 3, 1], ListaOrdenada). => ListaOrdenada = [1, 2, 3, 4].

ordenar([N],[N]).
ordenar(Lista,Resultado):- ordenar(Lista,[],Resultado).
ordenar([X|Resto],Laux,Resultado):- insertar(X,Laux,Laux2), ordenar(Resto,Laux2,Resultado).
ordenar([X],Laux,Resultado):- insertar(X,Laux,Resultado).


ordenar2([],[]).
ordenar2([X|Resto],Resultado):- ordenar2(Resto,Laux), insertar(X,Laux,Resultado).

%ordenar2([1, 7, 2,7,8,1, 4, 5], Resultado).

%Escribir un programa en Prolog que aplane una lista. 
%El predicado aplanar/2 recibe una lista
%cuyos elementos pueden ser otras listas y debe retornar una lista con todos los elemento
%atómicos presentes.
%Ej.: aplanar([1, 2, 3], ListaPlana) . => ListaPlana = [1, 2, 3]
%Ej.: aplanar([1, 2, [3]], ListaPlana) . => ListaPlana = [1, 2, 3]
%Ej.: aplanar([1, [2, [3]]], ListaPlana) . => ListaPlana = [1, 2, 3]


aplanar([],[]).
aplanar([X|Resto],Resultado):- aplanar(X,Xplano), aplanar(Resto,RestoPlano), concatenar(Xplano,RestoPlano,Resultado).
aplanar(X,[X]):- not(is_list(X)).


%12. El siguiente programa en Prolog calcula las permutaciones de los elementos de una lista.
%a. Ejecute el mismo y escriba el resultado obtenido para per([1, 2, 3], L).
%b. Explique en sus propios términos cuál es la lógica que utiliza el programa para
%obtener las permutaciones.

ins(X, L, [ X | L ]).
ins(X, [ Y | L1 ], [ Y | L2 ]) :- ins(X, L1, L2).
per([],[]).
per([ X | L ], Lp) :- per(L, L1), ins(X, L1, Lp).


