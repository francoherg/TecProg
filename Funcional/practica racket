(define count-elem
  (lambda (x ls)
    (if (null? ls)
        0
        (if (eqv? x (car ls))
            (+ 1 (count-elem x (cdr ls)))
            (count-elem x (cdr ls))))))
(define concatenar
  (lambda (l1 l2)
    (if (null? l1)
        l2
        (cons (car l1) (concatenar (cdr l1) l2)))))
(define del-elem
  (lambda (x ls)
    (if (null? ls)
        ls
        (if (eqv? x (car ls))
            (del-elem x (cdr ls))
            (cons (car ls) (del-elem x (cdr ls)))))))

(define sinrepetidos
  (lambda (ls)
    (if (null? ls)
        ls
    (if (> (count-elem (car ls) ls) 1)
        (cons (car ls) (sinrepetidos (del-elem (car ls) (cdr ls))))
        (cons (car ls) (sinrepetidos (cdr ls)))))))
(sinrepetidos '(a b c d a s d))
(define paises
  (lambda (ls)
    (if (null? ls)
        ()
        (concatenar (concatenar (list (caar (car ls))) (list (caar (cdr (car ls))))) (paises (cdr ls))))))
(paises '(
( (Argentina . 5) (Brasil . 0 ) )
( (Argentina . 3) (Bolivia . 2) )
( (Argentina . 2) (Chile . 1) )
( (Bolivia . 1) (Paraguay . 0) )
( (Brasil . 1) (Venezuela . 0) )
( (Colombia . 0) (Ecuador . 2) )
( (Brasil . 2) (Ecuador . 1) )
))

(define cantidadpartidos
  (lambda (ls)
    ;(map (lambda (x) (cons x (count-elem x (paises ls)))) (sinrepetidos(paises ls)))))
    (if (null? ls)
        ()
        (map (lambda (x) (cons x (count-elem x (paises ls)))) (sinrepetidos(paises ls))))))

#|
(cantidadpartidos '(
( (Argentina . 5) (Brasil . 0 ) )
( (Argentina . 3) (Bolivia . 2) )
( (Argentina . 2) (Chile . 1) )
( (Bolivia . 1) (Paraguay . 0) )
( (Brasil . 1) (Venezuela . 0) )
( (Colombia . 0) (Ecuador . 2) )
( (Brasil . 2) (Ecuador . 1) )
))
|#

(define riesgo
  (lambda (dist)
    (cond
      [(< dist 1)
       (* 0.1 dist)]
      [(and (>= dist 1) (< dist 3))
       (* 0.3 dist)]
      [else
       (* 0.5 dist)]
      )))
(define cuadrado
  (lambda (a)
    (* a a)))
(define distance
  (lambda (a b)
    (if (or (null? a) (null? b))
        0
        (sqrt (+ (cuadrado (- (car b) (car a))) (cuadrado (- (cadr b) (cadr a))) (cuadrado (- (caddr b) (caddr a))))))))
(define menor-riesgo-aux
  (lambda (ls)
    (let ((elem1 (car ls)))
                    (if (= (length ls) 1)
                        elem1
                        (let ((elem2 (menor-riesgo-aux(cdr ls))))
                          (if (<  (cdr elem2)  (cdr elem1))
                              elem2
                              elem1
                              ))))))
(define riesgo-ls
  (lambda (origen ls)
    (if (null? ls)
        ()
        (concatenar (list (riesgo (distance origen (car ls)))) (riesgo-ls origen (cdr ls))))))

(riesgo-ls '(0 0 0) '((1 1 500) (2 4 1500) (5 7 7500)))
(define menorriesgo
  (lambda (origen ls)
    (car (menor-riesgo-aux (map cons ls (riesgo-ls origen ls))))))
(menorriesgo '(0 0 0) '((1 1 500) (2 4 1500) (5 7 7500)))

(define aplanar (lambda (list4)
                  (if (null? list4)
                      '()
                      (if (list? (car list4))
                          (concatenar (aplanar (car list4)) (aplanar (cdr list4)))
                          (cons (car list4) (aplanar (cdr list4)))
                          )
                      )
                  ))

(define factura-aux
  (lambda (tipo ls)
    (cond
      [(null? ls)
       ()]
      [(eqv? tipo 0)
       (cons tipo (* 0 (count-elem tipo ls)) )]
      [(eqv? tipo 1)
       (cons tipo (* 300 (count-elem tipo ls)) )]
      [(eqv? tipo 2)
       (cons tipo (* 150 (count-elem tipo ls)) )]
      [(eqv? tipo 3)
       (cons tipo (* 100 (count-elem tipo ls)))])))

(factura-aux 3 '(0 0 0 1 1 0 2 0 1 0))
(define factura
  (lambda (ls)
    (if (null? ls)
        ()
        (if (list? ls)
            (let ((lsaux (aplanar ls)))
              (let ((aux1 (factura-aux 1  lsaux)) (aux2 (factura-aux 2 lsaux)) (aux3 (factura-aux 3  lsaux)))
            (cons aux1 (cons aux2 (cons aux3 (list (cons "total" (+ (car aux1) (car aux2) (car aux3)))))))))))))
(factura '((0 0 0 1 1 0 2 0 1 0) (0 1 1 3 0 0 1 1 1 1) (1 1 1 3 3 1 1 1 0 2) (1 1 2 2 0 0 1 1 1 0)))

(define div-a-mul-b
  (lambda (a b)
    (if (eqv? a 1)
        (cons (cons a b) '())
        (cons (cons a b) (div-a-mul-b (floor (/ a 2)) (* b 2))))))

(div-a-mul-b 27 82)

(define sumandos-aux
  (lambda (ls)
    (if (null? ls)
        0
        (if (odd? (caar ls))
            (+ (cdar ls) (sumandos-aux (cdr ls)))
            (+ 0 (sumandos-aux (cdr ls)))))))

(define sumandos
  (lambda (a b)
    (let ((ls (div-a-mul-b a b)))
      (sumandos-aux ls))))
(sumandos 27 82)